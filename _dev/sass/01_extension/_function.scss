@charset "UTF-8";

// ========================================================================================
// Function 定義
// ========================================================================================

// ゼロ埋め関数（カスタム Sass 関数）
// -------------------------------------------------------------------------------------------------------
//    zeropadding(埋めたい桁数, 変換対象の値／変数);
//
//    使用例：
//    $tmp: "";
//    * {
//        @for $i from 1 through 5 {
//            $tmp: zeropadding(3, $i);
//            &.item-#{$tmp} { width: $i * 2em; }
//        }
//    }
//
//    ＊カスタム変数のため、関数本体は custome_function.rb に記載
// -------------------------------------------------------------------------------------------------------


// フォントサイズの相対値算出
// -------------------------------------------------------------------------------------------------------
//    $size     : 実際に指定したいフォントサイズ
//    $context  : 要素が継承しているフォントサイズ
//    $unit     : フォントサイズの単位（指定なしで % を使用）
//
//    使用例：
//    p.foo {
//        font-size : fz(12px, 16px);  <= フォントサイズ 16px が継承されている状態で 12px に変更し、単位を％指定とする
//    }
// -------------------------------------------------------------------------------------------------------

@function fz ($size, $context:$baseFontSize, $unit:'%') {
    $size : nounit($size);
    $context : nounit($context);
    @if $unit == '%' {
        @return round(percentage($size/$context));
    } @else {
        @return #{$size/$context}#{$unit};
    }
}


// px 指定の em 変換
// -------------------------------------------------------------------------------------------------------
//    $size     : 実際に指定したいフォントサイズ
//    $context  : 要素が継承しているフォントサイズ
//
//    使用例：
//    p.foo {
//        margin-bottom : pxem(30px, 14px);  <= フォントサイズ 14px が継承されている 30px のマージンボトムを em に変換する
//    }
// -------------------------------------------------------------------------------------------------------

@function pxem ($size, $context) {
    $unit : 'em';
    $size : nounit($size);
    $context : nounit($context);
    @return $size/$context#{$unit};
}


// RGB 値の同数調整（adjust-color() のラップ関数）
// -------------------------------------------------------------------------------------------------------
//    RGB の値を同数調整し、指定の色を明るく／暗くする関数
//
//    $color    : 変更したい元の色
//    $weight   : 係数（デフォルトで 0.5）　正の値で白に、負の値で黒に近づく
//
//    使用例：
//    p.foo {
//        background-color : adjust-rgb(#f00, 0.2);  <= #f00 の rgb 値を 51（255*0.2）増加
//    }
// -------------------------------------------------------------------------------------------------------

@function adjust-rgb($color, $weight:0.5) {
    $num : 255 * $weight;
    @return adjust-color($color, $red:$num, $green:$num, $blue:$num);
}


// 背景色と色を混ぜて rgba() をエミュレート
// -------------------------------------------------------------------------------------------------------
//    指定色（第一引数）と背景色（第二引数）を混ぜて、rgba の値をエミュレートしたアルファ値なしの色を算出する
//    主に transparentize() のフォールバックとして使用する
//    mix() と同じ機能だが、第三引数に小数を指定できるため、transparentize() と併用しやすい
//
//    $color-1  : 変更したい元の色
//    $color-2  : 混ぜる色
//    $weight   : 係数（デフォルトで 0.5）　0 に近付くほど元の色に近づき、1 に近付くほど混ぜる色に近付く
//
//    使用例：
//    $bgColor : #f9f6f0;
//    body {
//        background-color: $bgColor;
//
//        > footer {
//            background-color: mixxd(#000, $bg, 0.8);
//            background-color: transparentize(#000, 0.8);
//            // background-color: rgba(#000, 0.8);
//        }
//
//    }
// -------------------------------------------------------------------------------------------------------

@function mixxd($color-1, $color-2, $weight:0.5) {
    $percentage : percentage(1 - $weight);
    @return mix($color-1, $color-2, $percentage);
}


// forked from kosei27's "Sass(Scss): 数値から単位を取り除く@function" http://jsdo.it/kosei27/cPPP
// -------------------------------------------------------------------------------------------------------
// 改善点:
// - 新しいユニットが増えたら随時追加、する必要がなくなった
// - 数値以外を渡した場合に@warnの警告を出すようにした
// nounit()
// 数値から単位を取り除く関数
//
// - unitless()が既にSassで別の用途で使用されているので、
//   関数名は nounit() とした
// - 数値以外を渡した場合は@warnの警告が出ます
//    あと、関数に渡した値をそのまま返します
// - 次のIssueの対応策としても少し有効かも
//   https://github.com/nex3/sass/issues/83
//   https://github.com/nex3/sass/issues/83#issuecomment-1150383
//   - (5px / 1px)で数値のみを取得できるとあるが非常にわかりづらい
//     なので、この関数を使う方が良い
//     [Poor]   5px / 1px   // -> 5
//     [Better] nounit(5px) // -> 5
// - 小数はSass側の処理によって小数点第5位までしか出ない。
//   それ以上出したい場合は下記参照。
//   http://stackoverflow.com/questions/7672473/sass-and-rounding-down-numbers-can-this-be-configured
//
// Units:
// - http://www.w3.org/TR/css3-values/#percentages
// - http://www.w3.org/TR/css3-values/#lengths
// - http://www.w3.org/TR/css3-values/#other-units
// -------------------------------------------------------------------------------------------------------

@function nounit($value) {
    @if (type-of($value) == number) {
        $_divisor: ($value * 0) + 1;
        @return $value / $_divisor;
    } @else {
        @warn "#{$value} is not a number.";
        @return $value;
    }
}